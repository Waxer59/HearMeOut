// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  conversationIds       String[] @db.ObjectId
  adminConversationIds  String[] @db.ObjectId
  activeConversationIds String[] @db.ObjectId
  viewedMessagesIds     String[] @db.ObjectId
  username              String   @unique
  password              String?
  avatar                String?
  githubId              String?
  isGithubAccount       Boolean  @default(false)
  isOnline              Boolean  @default(false)

  messageFroms       Message[]       @relation("messageFroms")
  messageTos         Message[]       @relation("messageTos")
  conversations      Conversation[]  @relation("conversations", fields: [conversationIds], references: [id])
  adminConversations Conversation[]  @relation("adminConversations", fields: [adminConversationIds], references: [id])
  friendReqFroms     FriendRequest[] @relation("friendReqFrom")
  friendReqTos       FriendRequest[] @relation("friendReqTo")
  viewedMessages     Message[]       @relation(fields: [viewedMessagesIds], references: [id])
  configuration      Configuration?
}

model FriendRequest {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  fromId String @db.ObjectId
  toId   String @db.ObjectId

  from User @relation("friendReqFrom", fields: [fromId], references: [id])
  to   User @relation("friendReqTo", fields: [toId], references: [id])
}

enum Theme {
  dark
  light
}

model Configuration {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique @db.ObjectId
  theme  Theme

  user User @relation(fields: [userId], references: [id])
}

model Message {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  fromId         String   @db.ObjectId
  toId           String   @db.ObjectId
  replyId        String?  @db.ObjectId
  conversationId String   @db.ObjectId
  viewedByIds    String[] @default([]) @db.ObjectId
  content        String
  createdAt      DateTime
  viewedByAll    Boolean  @default(false)

  from         User         @relation("messageFroms", fields: [fromId], references: [id])
  to           User         @relation("messageTos", fields: [toId], references: [id])
  reply        Message?     @relation("messageReply", fields: [replyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies      Message[]    @relation("messageReply")
  viewedBy     User[]       @relation(fields: [viewedByIds], references: [id])
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum ConversationType {
  chat
  group
}

model Conversation {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  creatorId String?          @db.ObjectId
  userIds   String[]         @db.ObjectId
  adminIds  String[]         @db.ObjectId
  name      String?
  type      ConversationType
  icon      String?
  joinCode  String?

  users    User[]    @relation("conversations", fields: [userIds], references: [id])
  admins   User[]    @relation("adminConversations", fields: [adminIds], references: [id])
  messages Message[]
}
