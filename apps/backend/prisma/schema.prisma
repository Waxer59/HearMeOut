// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  username              String   @unique
  password              String?
  avatar                String?
  githubId              String?
  isOnline              Boolean  @default(false)
  conversationIds       String[] @db.ObjectId
  adminConversationIds  String[] @db.ObjectId
  activeConversationIds String[] @db.ObjectId
  viewedMessagesIds     String[] @db.ObjectId

  messageFroms        Message[]       @relation("messageFroms")
  messageTos          Message[]       @relation("messageTos")
  conversationsJoined Conversation[]  @relation("conversationsJoined", fields: [conversationIds], references: [id])
  conversationsAdmin  Conversation[]  @relation("conversationsAdmin", fields: [adminConversationIds], references: [id])
  friendReqFroms      FriendRequest[] @relation("friendReqFrom")
  friendReqTos        FriendRequest[] @relation("friendReqTo")
  viewedMessages      Message[]       @relation(fields: [viewedMessagesIds], references: [id])
  configuration       Configuration?
}

model FriendRequest {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  fromId String @db.ObjectId
  toId   String @db.ObjectId

  from User @relation("friendReqFrom", fields: [fromId], references: [id])
  to   User @relation("friendReqTo", fields: [toId], references: [id])
}

enum Theme {
  dark
  light
}

model Configuration {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique @db.ObjectId
  theme  Theme

  user User @relation(fields: [userId], references: [id])
}

model Message {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  fromId      String   @db.ObjectId
  toId        String   @db.ObjectId
  content     String
  viewedByIds String[] @db.ObjectId @default([])
  createdAt   DateTime
  replyId     String?  @db.ObjectId
  viewedByAll Boolean  @default(false)

  from                 User           @relation("messageFroms", fields: [fromId], references: [id])
  to                   User           @relation("messageTos", fields: [toId], references: [id])
  reply                Message?       @relation("messageReply", fields: [replyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies              Message[]      @relation("messageReply")
  viewedBy             User[]         @relation(fields: [viewedByIds], references: [id])
  conversationMessages Conversation[]
}

enum ConversationType {
  chat
  group
}

model Conversation {
  id         String           @id @default(auto()) @map("_id") @db.ObjectId
  name       String?
  type       ConversationType
  icon       String?
  joinCode   String?
  creatorId  String?          @db.ObjectId
  userIds    String[]         @db.ObjectId
  messageIds String[]         @db.ObjectId
  adminIds   String[]         @db.ObjectId

  users    User[]  @relation("conversationsJoined", fields: [userIds], references: [id])
  admins   User[]  @relation("conversationsAdmin", fields: [adminIds], references: [id])
  messages Message @relation(fields: [messageIds], references: [id], onDelete: Cascade)
}
