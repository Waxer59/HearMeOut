// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// TODO: ACTIVE CHATS, BLOCKED_USERS
model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  username      String   @unique
  password      String?
  avatar        String?
  githubId      String?  @unique
  isOnline      Boolean  @default(false)
  groupIds      String[] @db.ObjectId
  adminGroupIds String[] @db.ObjectId
  friendIds     String[] @db.ObjectId

  messageFroms        Message[]       @relation("messageFroms")
  messageTos          Message[]       @relation("messageTos")
  conversationsJoined Conversation[]  @relation("conversationsJoined", fields: [groupIds], references: [id])
  conversationsAdmin  Conversation[]  @relation("conversationsAdmin", fields: [adminGroupIds], references: [id])
  friendReqFroms      FriendRequest[] @relation("friendReqFrom")
  friendReqTos        FriendRequest[] @relation("friendReqTo")
  configuration       Configuration?
}

model FriendRequest {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  fromId String @db.ObjectId
  toId   String @db.ObjectId

  from User @relation("friendReqFrom", fields: [fromId], references: [id])
  to   User @relation("friendReqTo", fields: [toId], references: [id])
}

enum Theme {
  dark
  light
}

model Configuration {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique @db.ObjectId
  theme  Theme

  user User @relation(fields: [userId], references: [id])
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  fromId    String   @db.ObjectId
  toId      String   @db.ObjectId
  content   String
  viewed    Boolean  @default(false)
  createdAt DateTime
  replyId   String?  @db.ObjectId

  from          User           @relation("messageFroms", fields: [fromId], references: [id])
  to            User           @relation("messageTos", fields: [toId], references: [id])
  reply         Message?       @relation("messageReply", fields: [replyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies       Message[]      @relation("messageReply")
  groupMessages Conversation[]
}

enum ConversationType {
  chat
  group
}

model Conversation {
  id         String           @id @default(auto()) @map("_id") @db.ObjectId
  name       String?
  type       ConversationType
  icon       String?
  creatorId  String?          @db.ObjectId
  usersId    String[]         @db.ObjectId
  messagesId String[]         @db.ObjectId
  adminIds   String[]         @db.ObjectId

  users    User[]  @relation("conversationsJoined", fields: [usersId], references: [id])
  admins   User[]  @relation("conversationsAdmin", fields: [adminIds], references: [id])
  messages Message @relation(fields: [messagesId], references: [id])
}
